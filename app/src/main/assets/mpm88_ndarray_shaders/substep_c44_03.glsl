#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 2) buffer args_i32 { int _args_i32_[];}; 
layout(std430, binding = 2) buffer args_f32 { float _args_f32_[];}; 
layout(std430, binding = 5) buffer arr1_i32 { int _arr1_i32_[];}; 
layout(std430, binding = 5) buffer arr1_f32 { float _arr1_f32_[];}; 
layout(std430, binding = 7) buffer arr3_i32 { int _arr3_i32_[];}; 
layout(std430, binding = 7) buffer arr3_f32 { float _arr3_f32_[];}; 
layout(std430, binding = 6) buffer arr2_i32 { int _arr2_i32_[];}; 
layout(std430, binding = 6) buffer arr2_f32 { float _arr2_f32_[];}; 
layout(std430, binding = 4) buffer arr0_i32 { int _arr0_i32_[];}; 
layout(std430, binding = 4) buffer arr0_f32 { float _arr0_f32_[];}; 
layout(std430, binding = 9) buffer arr5_i32 { int _arr5_i32_[];}; 
layout(std430, binding = 9) buffer arr5_f32 { float _arr5_f32_[];}; 
layout(std430, binding = 8) buffer arr4_i32 { int _arr4_i32_[];}; 
layout(std430, binding = 8) buffer arr4_f32 { float _arr4_f32_[];}; 
float atomicAdd_arr0_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr0_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr0_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr0_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr0_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr0_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr0_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr0_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr0_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr0_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr0_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr0_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_arr1_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr1_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr1_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr1_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr1_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr1_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr1_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr1_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr1_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr1_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr1_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr1_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_arr2_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr2_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr2_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr2_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr2_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr2_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr2_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr2_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr2_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr2_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr2_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr2_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_arr3_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr3_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr3_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr3_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr3_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr3_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr3_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr3_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr3_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr3_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr3_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr3_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_arr4_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr4_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr4_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr4_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr4_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr4_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr4_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr4_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr4_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr4_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr4_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr4_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_arr5_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr5_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_arr5_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_arr5_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr5_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_arr5_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_arr5_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr5_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr5_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_arr5_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _arr5_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_arr5_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c44_03()
{ // range for
  // range from args buffer
  int Fu = _args_i32_[16 + 0 * 8 + 0];
  int _beg = 0, _end = Fu;
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int Fv = _itv;
      int Fw = Fv - Fu * int(Fv / Fu);
      int Fy = int(0);
      int _s0_arr0 = _args_i32_[16 + 0 * 8 + 0];
      int _s1_arr0 = _args_i32_[16 + 0 * 8 + 1];
      int Fz = Fw;
      Fz *= _s1_arr0;
      Fz += Fy;
      float FA = _arr0_f32_[Fz];
      int FB = _args_i32_[16 + 4 * 8 + 0];
      float FC = float(FB);
      float FD = FA * FC;
      int FE = int(1);
      int FF = Fw;
      FF *= _s1_arr0;
      FF += FE;
      float FG = _arr0_f32_[FF];
      float FH = FG * FC;
      float FI = float(0.5);
      float FJ = FD - FI;
      float FK = FH - FI;
      int FL = int(FJ);
      int FM = int(FK);
      float FN = float(FL);
      float FO = float(FM);
      float FP = FD - FN;
      float FQ = FH - FO;
      float FR = float(1.5);
      float FS = FR - FP;
      float FT = FR - FQ;
      float FU = FS * FS;
      float FV = FT * FT;
      float FW = FU * FI;
      float FX = FV * FI;
      float FY = float(1.0);
      float FZ = FP - FY;
      float G0 = FQ - FY;
      float G1 = FZ * FZ;
      float G2 = G0 * G0;
      float G3 = float(0.75);
      float G4 = G3 - G1;
      float G5 = G3 - G2;
      float G6 = FP - FI;
      float G7 = FQ - FI;
      float G8 = G6 * G6;
      float G9 = G7 * G7;
      float Ga = G8 * FI;
      float Gb = G9 * FI;
      float Gi = float(0.0);
      float Gj = Gi - FP;
      float Gk = Gi - FQ;
      int _s0_arr4 = _args_i32_[16 + 4 * 8 + 0];
      int _s1_arr4 = _args_i32_[16 + 4 * 8 + 1];
      int _s2_arr4 = _args_i32_[16 + 4 * 8 + 2];
      int Gm = FL;
      Gm *= _s1_arr4;
      Gm += FM;
      Gm *= _s2_arr4;
      Gm += Fy;
      float Gn = _arr4_f32_[Gm];
      int Go = FL;
      Go *= _s1_arr4;
      Go += FM;
      Go *= _s2_arr4;
      Go += FE;
      float Gp = _arr4_f32_[Go];
      float Gq = FW * FX;
      float Gr = Gq * Gn;
      float Gs = Gq * Gp;
      float Gz = Gn * Gj;
      float GA = Gn * Gk;
      float GB = Gp * Gj;
      float GC = Gp * Gk;
      float GD = float(4.0);
      float GE = Gq * GD;
      float GF = GE * Gz;
      float GG = GE * GA;
      float GH = GE * GB;
      float GI = GE * GC;
      float GJ = GF * FC;
      float GK = GG * FC;
      float GL = GH * FC;
      float GM = GI * FC;
      float GZ = FY - FQ;
      int H0 = FM + FE;
      int H1 = FL;
      H1 *= _s1_arr4;
      H1 += H0;
      H1 *= _s2_arr4;
      H1 += Fy;
      float H2 = _arr4_f32_[H1];
      int H3 = FL;
      H3 *= _s1_arr4;
      H3 += H0;
      H3 *= _s2_arr4;
      H3 += FE;
      float H4 = _arr4_f32_[H3];
      float H5 = FW * G5;
      float H6 = H5 * H2;
      float H7 = H5 * H4;
      float H9 = Gr + H6;
      float Hc = Gs + H7;
      float He = H2 * Gj;
      float Hf = H2 * GZ;
      float Hg = H4 * Gj;
      float Hh = H4 * GZ;
      float Hi = H5 * GD;
      float Hj = Hi * He;
      float Hk = Hi * Hf;
      float Hl = Hi * Hg;
      float Hm = Hi * Hh;
      float Hn = Hj * FC;
      float Ho = Hk * FC;
      float Hp = Hl * FC;
      float Hq = Hm * FC;
      float Hs = GJ + Hn;
      float Hv = GK + Ho;
      float Hy = GL + Hp;
      float HB = GM + Hq;
      float HD = float(2.0);
      float HE = HD - FQ;
      int HF = int(2);
      int HG = FM + HF;
      int HH = FL;
      HH *= _s1_arr4;
      HH += HG;
      HH *= _s2_arr4;
      HH += Fy;
      float HI = _arr4_f32_[HH];
      int HJ = FL;
      HJ *= _s1_arr4;
      HJ += HG;
      HJ *= _s2_arr4;
      HJ += FE;
      float HK = _arr4_f32_[HJ];
      float HL = FW * Gb;
      float HM = HL * HI;
      float HN = HL * HK;
      float HP = H9 + HM;
      float HS = Hc + HN;
      float HU = HI * Gj;
      float HV = HI * HE;
      float HW = HK * Gj;
      float HX = HK * HE;
      float HY = HL * GD;
      float HZ = HY * HU;
      float I0 = HY * HV;
      float I1 = HY * HW;
      float I2 = HY * HX;
      float I3 = HZ * FC;
      float I4 = I0 * FC;
      float I5 = I1 * FC;
      float I6 = I2 * FC;
      float I8 = Hs + I3;
      float Ib = Hv + I4;
      float Ie = Hy + I5;
      float Ih = HB + I6;
      float Ij = FY - FP;
      int Ik = FL + FE;
      int Il = Ik;
      Il *= _s1_arr4;
      Il += FM;
      Il *= _s2_arr4;
      Il += Fy;
      float Im = _arr4_f32_[Il];
      int In = Ik;
      In *= _s1_arr4;
      In += FM;
      In *= _s2_arr4;
      In += FE;
      float Io = _arr4_f32_[In];
      float Ip = G4 * FX;
      float Iq = Ip * Im;
      float Ir = Ip * Io;
      float It = HP + Iq;
      float Iw = HS + Ir;
      float Iy = Im * Ij;
      float Iz = Im * Gk;
      float IA = Io * Ij;
      float IB = Io * Gk;
      float IC = Ip * GD;
      float ID = IC * Iy;
      float IE = IC * Iz;
      float IF = IC * IA;
      float IG = IC * IB;
      float IH = ID * FC;
      float II = IE * FC;
      float IJ = IF * FC;
      float IK = IG * FC;
      float IM = I8 + IH;
      float IP = Ib + II;
      float IS = Ie + IJ;
      float IV = Ih + IK;
      int IX = Ik;
      IX *= _s1_arr4;
      IX += H0;
      IX *= _s2_arr4;
      IX += Fy;
      float IY = _arr4_f32_[IX];
      int IZ = Ik;
      IZ *= _s1_arr4;
      IZ += H0;
      IZ *= _s2_arr4;
      IZ += FE;
      float J0 = _arr4_f32_[IZ];
      float J1 = G4 * G5;
      float J2 = J1 * IY;
      float J3 = J1 * J0;
      float J5 = It + J2;
      float J8 = Iw + J3;
      float Ja = IY * Ij;
      float Jb = IY * GZ;
      float Jc = J0 * Ij;
      float Jd = J0 * GZ;
      float Je = J1 * GD;
      float Jf = Je * Ja;
      float Jg = Je * Jb;
      float Jh = Je * Jc;
      float Ji = Je * Jd;
      float Jj = Jf * FC;
      float Jk = Jg * FC;
      float Jl = Jh * FC;
      float Jm = Ji * FC;
      float Jo = IM + Jj;
      float Jr = IP + Jk;
      float Ju = IS + Jl;
      float Jx = IV + Jm;
      int Jz = Ik;
      Jz *= _s1_arr4;
      Jz += HG;
      Jz *= _s2_arr4;
      Jz += Fy;
      float JA = _arr4_f32_[Jz];
      int JB = Ik;
      JB *= _s1_arr4;
      JB += HG;
      JB *= _s2_arr4;
      JB += FE;
      float JC = _arr4_f32_[JB];
      float JD = G4 * Gb;
      float JE = JD * JA;
      float JF = JD * JC;
      float JH = J5 + JE;
      float JK = J8 + JF;
      float JM = JA * Ij;
      float JN = JA * HE;
      float JO = JC * Ij;
      float JP = JC * HE;
      float JQ = JD * GD;
      float JR = JQ * JM;
      float JS = JQ * JN;
      float JT = JQ * JO;
      float JU = JQ * JP;
      float JV = JR * FC;
      float JW = JS * FC;
      float JX = JT * FC;
      float JY = JU * FC;
      float K0 = Jo + JV;
      float K3 = Jr + JW;
      float K6 = Ju + JX;
      float K9 = Jx + JY;
      float Kb = HD - FP;
      int Kc = FL + HF;
      int Kd = Kc;
      Kd *= _s1_arr4;
      Kd += FM;
      Kd *= _s2_arr4;
      Kd += Fy;
      float Ke = _arr4_f32_[Kd];
      int Kf = Kc;
      Kf *= _s1_arr4;
      Kf += FM;
      Kf *= _s2_arr4;
      Kf += FE;
      float Kg = _arr4_f32_[Kf];
      float Kh = Ga * FX;
      float Ki = Kh * Ke;
      float Kj = Kh * Kg;
      float Kl = JH + Ki;
      float Ko = JK + Kj;
      float Kq = Ke * Kb;
      float Kr = Ke * Gk;
      float Ks = Kg * Kb;
      float Kt = Kg * Gk;
      float Ku = Kh * GD;
      float Kv = Ku * Kq;
      float Kw = Ku * Kr;
      float Kx = Ku * Ks;
      float Ky = Ku * Kt;
      float Kz = Kv * FC;
      float KA = Kw * FC;
      float KB = Kx * FC;
      float KC = Ky * FC;
      float KE = K0 + Kz;
      float KH = K3 + KA;
      float KK = K6 + KB;
      float KN = K9 + KC;
      int KP = Kc;
      KP *= _s1_arr4;
      KP += H0;
      KP *= _s2_arr4;
      KP += Fy;
      float KQ = _arr4_f32_[KP];
      int KR = Kc;
      KR *= _s1_arr4;
      KR += H0;
      KR *= _s2_arr4;
      KR += FE;
      float KS = _arr4_f32_[KR];
      float KT = Ga * G5;
      float KU = KT * KQ;
      float KV = KT * KS;
      float KX = Kl + KU;
      float L0 = Ko + KV;
      float L2 = KQ * Kb;
      float L3 = KQ * GZ;
      float L4 = KS * Kb;
      float L5 = KS * GZ;
      float L6 = KT * GD;
      float L7 = L6 * L2;
      float L8 = L6 * L3;
      float L9 = L6 * L4;
      float La = L6 * L5;
      float Lb = L7 * FC;
      float Lc = L8 * FC;
      float Ld = L9 * FC;
      float Le = La * FC;
      float Lg = KE + Lb;
      float Lj = KH + Lc;
      float Lm = KK + Ld;
      float Lp = KN + Le;
      int Lr = Kc;
      Lr *= _s1_arr4;
      Lr += HG;
      Lr *= _s2_arr4;
      Lr += Fy;
      float Ls = _arr4_f32_[Lr];
      int Lt = Kc;
      Lt *= _s1_arr4;
      Lt += HG;
      Lt *= _s2_arr4;
      Lt += FE;
      float Lu = _arr4_f32_[Lt];
      float Lv = Ga * Gb;
      float Lw = Lv * Ls;
      float Lx = Lv * Lu;
      float Lz = KX + Lw;
      float LC = L0 + Lx;
      float LE = Ls * Kb;
      float LF = Ls * HE;
      float LG = Lu * Kb;
      float LH = Lu * HE;
      float LI = Lv * GD;
      float LJ = LI * LE;
      float LK = LI * LF;
      float LL = LI * LG;
      float LM = LI * LH;
      float LN = LJ * FC;
      float LO = LK * FC;
      float LP = LL * FC;
      float LQ = LM * FC;
      float LS = Lg + LN;
      float LV = Lj + LO;
      float LY = Lm + LP;
      float M1 = Lp + LQ;
      int _s0_arr1 = _args_i32_[16 + 1 * 8 + 0];
      int _s1_arr1 = _args_i32_[16 + 1 * 8 + 1];
      int M5 = Fw;
      M5 *= _s1_arr1;
      M5 += Fy;
      _arr1_f32_[M5] = Lz;
      int M8 = Fw;
      M8 *= _s1_arr1;
      M8 += FE;
      _arr1_f32_[M8] = LC;
      float Ma = float(0.0002);
      float Mb = float(0.0078125);
      float Mc = FC * Mb;
      float Md = Ma / Mc;
      float Me = float(min(Md, Ma));
      float Mf = Me * Lz;
      float Mg = Me * LC;
      float Mh;
      { // Begin Atomic Op
      Mh = atomicAdd_arr0_f32(Fz, Mf);
      } // End Atomic Op
      float Mi;
      { // Begin Atomic Op
      Mi = atomicAdd_arr0_f32(FF, Mg);
      } // End Atomic Op
      int _s0_arr2 = _args_i32_[16 + 2 * 8 + 0];
      int Mk = Fw;
      float Ml = _arr2_f32_[Mk];
      float Mo = LS + M1;
      float Mp = Me * Mo;
      float Mq = Mp + FY;
      float Mr = Ml * Mq;
      _arr2_f32_[Mk] = Mr;
      int _s0_arr3 = _args_i32_[16 + 3 * 8 + 0];
      int _s1_arr3 = _args_i32_[16 + 3 * 8 + 1];
      int _s2_arr3 = _args_i32_[16 + 3 * 8 + 2];
      int Mu = Fw;
      Mu *= _s1_arr3;
      Mu += Fy;
      Mu *= _s2_arr3;
      Mu += Fy;
      _arr3_f32_[Mu] = LS;
      int Mx = Fw;
      Mx *= _s1_arr3;
      Mx += Fy;
      Mx *= _s2_arr3;
      Mx += FE;
      _arr3_f32_[Mx] = LV;
      int MA = Fw;
      MA *= _s1_arr3;
      MA += FE;
      MA *= _s2_arr3;
      MA += Fy;
      _arr3_f32_[MA] = LY;
      int MC = Fw;
      MC *= _s1_arr3;
      MC += FE;
      MC *= _s2_arr3;
      MC += FE;
      _arr3_f32_[MC] = M1;
  }
}

void main()
{
  substep_c44_03();
}
