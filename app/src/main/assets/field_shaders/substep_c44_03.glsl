#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
float atomicAdd_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c44_03()
{ // range for
  // range known at compile time
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (8192); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = 0 + _sid;
      int Fb = _itv;
      int C3E = 0;
      int Cqa = int(0);
      int C3G = C3E + 491520 * Cqa; // S0
      int C3H = C3G + 32768; // S1
      int Cu5 = int(8191);
      int CtT = Fb & Cu5;
      int Cqc = int(1);
      int C3K = C3H + 8 * CtT; // S1
      int C3L = C3K + 0; // S2
      float Fi = _data_f32_[C3L >> 2];
      float Fj = float(128.0);
      float Fk = Fi * Fj;
      int C3V = C3K + 4; // S3
      float Fm = _data_f32_[C3V >> 2];
      float Fn = Fm * Fj;
      float Fo = float(0.5);
      float Fp = Fk - Fo;
      float Fq = Fn - Fo;
      int Fr = int(Fp);
      int Fs = int(Fq);
      float Ft = float(Fr);
      float Fu = Fk - Ft;
      float Fv = float(Fs);
      float Fw = Fn - Fv;
      float Fx = float(1.5);
      float Fy = Fx - Fu;
      float Fz = Fx - Fw;
      float FA = Fy * Fy;
      float FB = Fz * Fz;
      float FC = FA * Fo;
      float FD = FB * Fo;
      float FE = float(1.0);
      float FF = Fu - FE;
      float FG = Fw - FE;
      float FH = FF * FF;
      float FI = FG * FG;
      float FJ = float(0.75);
      float FK = FJ - FH;
      float FL = FJ - FI;
      float FM = Fu - Fo;
      float FN = Fw - Fo;
      float FO = FM * FM;
      float FP = FN * FN;
      float FQ = FO * Fo;
      float FR = FP * Fo;
      float FY = float(0.0);
      float FZ = FY - Fu;
      float G0 = FY - Fw;
      float G1 = float(0.0078125);
      float G2 = FZ * G1;
      float G3 = G0 * G1;
      float G4 = FC * FD;
      int C42 = C3G + 360448; // S14
      int Cgr = int(127);
      int Cgs = Fr & Cgr;
      int Cgw = Fs & Cgr;
      int Cug = int(7);
      int Cuh = Cgs << Cug;
      int Cqr = Cgw + Cuh;
      int C46 = C42 + 8 * Cqr; // S14
      int C47 = C46 + 0; // S15
      float G6 = _data_f32_[C47 >> 2];
      int C4j = C46 + 4; // S16
      float G8 = _data_f32_[C4j >> 2];
      float G9 = G4 * G6;
      float Ga = G4 * G8;
      float Gh = G6 * G2;
      float Gi = G6 * G3;
      float Gj = G8 * G2;
      float Gk = G8 * G3;
      float Gl = float(4.0);
      float Gm = G4 * Gl;
      float Gn = Gm * Gh;
      float Go = Gm * Gi;
      float Gp = Gm * Gj;
      float Gq = Gm * Gk;
      float Gr = float(16384.0);
      float Gs = Gn * Gr;
      float Gt = Go * Gr;
      float Gu = Gp * Gr;
      float Gv = Gq * Gr;
      float GI = FE - Fw;
      float GJ = GI * G1;
      float GK = FC * FL;
      int GM = Fs + Cqc;
      int CgM = GM & Cgr;
      int CqH = CgM + Cuh;
      int C4u = C42 + 8 * CqH; // S14
      int C4v = C4u + 0; // S15
      float GO = _data_f32_[C4v >> 2];
      int C4H = C4u + 4; // S16
      float GQ = _data_f32_[C4H >> 2];
      float GR = GK * GO;
      float GS = GK * GQ;
      float GU = G9 + GR;
      float GX = Ga + GS;
      float GZ = GO * G2;
      float H0 = GO * GJ;
      float H1 = GQ * G2;
      float H2 = GQ * GJ;
      float H3 = GK * Gl;
      float H4 = H3 * GZ;
      float H5 = H3 * H0;
      float H6 = H3 * H1;
      float H7 = H3 * H2;
      float H8 = H4 * Gr;
      float H9 = H5 * Gr;
      float Ha = H6 * Gr;
      float Hb = H7 * Gr;
      float Hd = Gs + H8;
      float Hg = Gt + H9;
      float Hj = Gu + Ha;
      float Hm = Gv + Hb;
      float Ho = float(2.0);
      float Hp = Ho - Fw;
      float Hq = Hp * G1;
      float Hr = FC * FR;
      int Hs = int(2);
      int Ht = Fs + Hs;
      int Ch2 = Ht & Cgr;
      int CqX = Ch2 + Cuh;
      int C4S = C42 + 8 * CqX; // S14
      int C4T = C4S + 0; // S15
      float Hv = _data_f32_[C4T >> 2];
      int C55 = C4S + 4; // S16
      float Hx = _data_f32_[C55 >> 2];
      float Hy = Hr * Hv;
      float Hz = Hr * Hx;
      float HB = GU + Hy;
      float HE = GX + Hz;
      float HG = Hv * G2;
      float HH = Hv * Hq;
      float HI = Hx * G2;
      float HJ = Hx * Hq;
      float HK = Hr * Gl;
      float HL = HK * HG;
      float HM = HK * HH;
      float HN = HK * HI;
      float HO = HK * HJ;
      float HP = HL * Gr;
      float HQ = HM * Gr;
      float HR = HN * Gr;
      float HS = HO * Gr;
      float HU = Hd + HP;
      float HX = Hg + HQ;
      float I0 = Hj + HR;
      float I3 = Hm + HS;
      float I5 = FE - Fu;
      float I6 = I5 * G1;
      float I7 = FK * FD;
      int I8 = Fr + Cqc;
      int Che = I8 & Cgr;
      int Cuj = Che << Cug;
      int Crd = Cgw + Cuj;
      int C5g = C42 + 8 * Crd; // S14
      int C5h = C5g + 0; // S15
      float Ia = _data_f32_[C5h >> 2];
      int C5t = C5g + 4; // S16
      float Ic = _data_f32_[C5t >> 2];
      float Id = I7 * Ia;
      float Ie = I7 * Ic;
      float Ig = HB + Id;
      float Ij = HE + Ie;
      float Il = Ia * I6;
      float Im = Ia * G3;
      float In = Ic * I6;
      float Io = Ic * G3;
      float Ip = I7 * Gl;
      float Iq = Ip * Il;
      float Ir = Ip * Im;
      float Is = Ip * In;
      float It = Ip * Io;
      float Iu = Iq * Gr;
      float Iv = Ir * Gr;
      float Iw = Is * Gr;
      float Ix = It * Gr;
      float Iz = HU + Iu;
      float IC = HX + Iv;
      float IF = I0 + Iw;
      float II = I3 + Ix;
      float IK = FK * FL;
      int Crt = CgM + Cuj;
      int C5E = C42 + 8 * Crt; // S14
      int C5F = C5E + 0; // S15
      float IM = _data_f32_[C5F >> 2];
      int C5R = C5E + 4; // S16
      float IO = _data_f32_[C5R >> 2];
      float IP = IK * IM;
      float IQ = IK * IO;
      float IS = Ig + IP;
      float IV = Ij + IQ;
      float IX = IM * I6;
      float IY = IM * GJ;
      float IZ = IO * I6;
      float J0 = IO * GJ;
      float J1 = IK * Gl;
      float J2 = J1 * IX;
      float J3 = J1 * IY;
      float J4 = J1 * IZ;
      float J5 = J1 * J0;
      float J6 = J2 * Gr;
      float J7 = J3 * Gr;
      float J8 = J4 * Gr;
      float J9 = J5 * Gr;
      float Jb = Iz + J6;
      float Je = IC + J7;
      float Jh = IF + J8;
      float Jk = II + J9;
      float Jm = FK * FR;
      int CrJ = Ch2 + Cuj;
      int C62 = C42 + 8 * CrJ; // S14
      int C63 = C62 + 0; // S15
      float Jo = _data_f32_[C63 >> 2];
      int C6f = C62 + 4; // S16
      float Jq = _data_f32_[C6f >> 2];
      float Jr = Jm * Jo;
      float Js = Jm * Jq;
      float Ju = IS + Jr;
      float Jx = IV + Js;
      float Jz = Jo * I6;
      float JA = Jo * Hq;
      float JB = Jq * I6;
      float JC = Jq * Hq;
      float JD = Jm * Gl;
      float JE = JD * Jz;
      float JF = JD * JA;
      float JG = JD * JB;
      float JH = JD * JC;
      float JI = JE * Gr;
      float JJ = JF * Gr;
      float JK = JG * Gr;
      float JL = JH * Gr;
      float JN = Jb + JI;
      float JQ = Je + JJ;
      float JT = Jh + JK;
      float JW = Jk + JL;
      float JY = Ho - Fu;
      float JZ = JY * G1;
      float K0 = FQ * FD;
      int K1 = Fr + Hs;
      int Ci0 = K1 & Cgr;
      int Cul = Ci0 << Cug;
      int CrZ = Cgw + Cul;
      int C6q = C42 + 8 * CrZ; // S14
      int C6r = C6q + 0; // S15
      float K3 = _data_f32_[C6r >> 2];
      int C6D = C6q + 4; // S16
      float K5 = _data_f32_[C6D >> 2];
      float K6 = K0 * K3;
      float K7 = K0 * K5;
      float K9 = Ju + K6;
      float Kc = Jx + K7;
      float Ke = K3 * JZ;
      float Kf = K3 * G3;
      float Kg = K5 * JZ;
      float Kh = K5 * G3;
      float Ki = K0 * Gl;
      float Kj = Ki * Ke;
      float Kk = Ki * Kf;
      float Kl = Ki * Kg;
      float Km = Ki * Kh;
      float Kn = Kj * Gr;
      float Ko = Kk * Gr;
      float Kp = Kl * Gr;
      float Kq = Km * Gr;
      float Ks = JN + Kn;
      float Kv = JQ + Ko;
      float Ky = JT + Kp;
      float KB = JW + Kq;
      float KD = FQ * FL;
      int Csf = CgM + Cul;
      int C6O = C42 + 8 * Csf; // S14
      int C6P = C6O + 0; // S15
      float KF = _data_f32_[C6P >> 2];
      int C71 = C6O + 4; // S16
      float KH = _data_f32_[C71 >> 2];
      float KI = KD * KF;
      float KJ = KD * KH;
      float KL = K9 + KI;
      float KO = Kc + KJ;
      float KQ = KF * JZ;
      float KR = KF * GJ;
      float KS = KH * JZ;
      float KT = KH * GJ;
      float KU = KD * Gl;
      float KV = KU * KQ;
      float KW = KU * KR;
      float KX = KU * KS;
      float KY = KU * KT;
      float KZ = KV * Gr;
      float L0 = KW * Gr;
      float L1 = KX * Gr;
      float L2 = KY * Gr;
      float L4 = Ks + KZ;
      float L7 = Kv + L0;
      float La = Ky + L1;
      float Ld = KB + L2;
      float Lf = FQ * FR;
      int Csv = Ch2 + Cul;
      int C7c = C42 + 8 * Csv; // S14
      int C7d = C7c + 0; // S15
      float Lh = _data_f32_[C7d >> 2];
      int C7p = C7c + 4; // S16
      float Lj = _data_f32_[C7p >> 2];
      float Lk = Lf * Lh;
      float Ll = Lf * Lj;
      float Ln = KL + Lk;
      float Lq = KO + Ll;
      float Ls = Lh * JZ;
      float Lt = Lh * Hq;
      float Lu = Lj * JZ;
      float Lv = Lj * Hq;
      float Lw = Lf * Gl;
      float Lx = Lw * Ls;
      float Ly = Lw * Lt;
      float Lz = Lw * Lu;
      float LA = Lw * Lv;
      float LB = Lx * Gr;
      float LC = Ly * Gr;
      float LD = Lz * Gr;
      float LE = LA * Gr;
      float LG = L4 + LB;
      float LJ = L7 + LC;
      float LM = La + LD;
      float LP = Ld + LE;
      int C7v = C3G + 98304; // S4
      int C7y = C7v + 8 * CtT; // S4
      int C7z = C7y + 0; // S5
      _data_f32_[C7z >> 2] = Ln;
      int C7J = C7y + 4; // S6
      _data_f32_[C7J >> 2] = Lq;
      float LX = float(0.0002);
      float LY = Ln * LX;
      float LZ = Lq * LX;
      float M1 = Fi + LY;
      _data_f32_[C3L >> 2] = M1;
      float M4 = Fm + LZ;
      _data_f32_[C3V >> 2] = M4;
      int C8t = C3G + 0; // S12
      int C8w = C8t + 4 * CtT; // S12
      int C8x = C8w + 0; // S13
      float M7 = _data_f32_[C8x >> 2];
      float Ma = LG + LP;
      float Mb = Ma * LX;
      float Mc = Mb + FE;
      float Md = M7 * Mc;
      _data_f32_[C8x >> 2] = Md;
      int C8N = C3G + 229376; // S7
      int C8Q = C8N + 16 * CtT; // S7
      int C8R = C8Q + 0; // S8
      _data_f32_[C8R >> 2] = LG;
      int C91 = C8Q + 4; // S9
      _data_f32_[C91 >> 2] = LJ;
      int C9b = C8Q + 8; // S10
      _data_f32_[C9b >> 2] = LM;
      int C9l = C8Q + 12; // S11
      _data_f32_[C9l >> 2] = LP;
  }
}

void main()
{
  substep_c44_03();
}
